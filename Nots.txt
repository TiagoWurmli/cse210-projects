-StackOverflow: site pra ajudar como faz as coisas.

!C#!
-Em C# Usa {} para determinar oq vai dentro, não usa : q nem python
-Cada comando tem q terminar com ";"(semicolons). So coisas q tem corpo q nao precisam, tipo o if.

!Variaveis!
-Nome das variaveis é assim "firstName" não "first_name"
-Em C# as variaveis tem q ser declaradas antes, e não podem ser mudadas depois
Ex: int x;   ou   int x = 5;
-MAS da pra mudar o tipo do valor antesde colocar na variavel usando int.Parse(). 
Ex: 
Console.Write("What is your favorite number? ");
string userInput = Console.ReadLine();
int number = int.Parse(userInput);
-Pra mudar de int pra string usa .ToString()
Ex: int number = 42;
string textVersion = number.ToString();

Variaveis comuns:
int - Integers (whole numbers, positive and negative)
string - Strings (a sequence of characters, including letters, numbers, or symbols)
float - Floating point numbers (numbers that use decimals)
double - Double precision floating point numbers (just like a float, except it takes up twice as much memory, so it can hold larger numbers or numbers with more decimal places)
bool - Boolean variables (true or false)

!Print!
Console.WriteLine("Hello World!"); Vai criar uma nova linha no final
Console.Write("There will not be a newline after this."); Não vai criar uma nova linha no final
-Pra printa uma variavel usa $, que nem o f no python
Ex: Console.WriteLine($"I am studying at {school}.");

!Input!
Console.ReadLine() Retorna uma string, não importa oq escreverem, sera uma string
-Não escreve nada, entao tem q printa antes 
Ex:Console.Write("What is your favorite color? ");
string color = Console.ReadLine();

!if!
-A condição tem q ta dentro do ()
if (x > y)
{
  Console.WriteLine("greater");
}
-'else' e 'else if' são q nem em python, so que não é elif, é else if

!Operators!
== 
!=
>=
<=
&& é o and em python
|| é o or em python
! é o not em python
Ex:if (!(name == "Peter" || name == "James" || name == "John"))
{
    Console.WriteLine("This is a not one of those three");
}

!Loops!
-While: igual ao python
Ex: string response = "yes";
while (response == "yes")
{
    Console.Write("Do you want to continue? ");
    response = Console.ReadLine();
}
-Do-While: Faz uma vez, dai ve se vai fazer de nv se cumprir as paradas
Ex: string response;
do
{
    Console.Write("Do you want to continue? ");
    response = Console.ReadLine();
} while (response == "yes");
-For: É como so fosse o "for range" do python. O "i++" quer dizer q vai de um a um, se for "i + 2" vai de 2 em 2
Ex: for (int i = 0; i < 10; i++)
{
    Console.WriteLine(i);
}                           Vai de 0 a 9
-Foreach: É tipo o "for" do python
Ex: foreach (string color in colors)
{
    Console.WriteLine(color);
}

!Random!
Random randomGenerator = new Random();
int number = randomGenerator.Next(1, 11);
-Inclui o primeiro numero, mas não o segundo, entao vai de 1 a 10.

!List! (Listas)
-Tem q declarar q é uma lista(e qual tipo de lista), depois criar a lista
Ex: List<int> numbers = new List<int>();
List<string> words = new List<string>();   O parenteses no final vem sempre depois q cria algo
Any file that uses Lists (or any other standard collection), must refer to that library at the top of the file. (This is so common that sometimes your settings for C# can be specified so that you do not not have include this, but it is important to know about it, in case you run into problems.)
Ex: using System.Collections.Generic;
-Add(). Adicionar itens na lista
Ex: using System.Collections.Generic;
...
List<string> words = new List<string>();
words.Add("phone");
words.Add("keyboard");
words.Add("mouse");
-Contar o tamanho da lista usar "Count" 
Ex: Console.WriteLine(words.Count);
-The easiest (and safest) way to iterate through a list in C# is to use the foreach loop:
Ex: foreach (string word in words)
{
    Console.WriteLine(word);
}
-Index. 
Ex: for (int i = 0; i < words.Count; i++)
{
    Console.WriteLine(words[i]);
}

